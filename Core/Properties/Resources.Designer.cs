//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. (I WISH!)
// </auto-generated>
//------------------------------------------------------------------------------

namespace CKAN.Properties {
    using System;


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() { }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null))
                {
                    resourceMan = new SingleAssemblyResourceManager("CKAN.Properties.Resources", typeof(Resources).Assembly);
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }

        internal static string AutoUpdateNotFetched {
            get { return (string)(ResourceManager.GetObject("AutoUpdateNotFetched", resourceCulture)); }
        }

        internal static string NetDownloading {
            get { return (string)(ResourceManager.GetObject("NetDownloading", resourceCulture)); }
        }
        internal static string NetMissingCertFailed {
            get { return (string)(ResourceManager.GetObject("NetMissingCertFailed", resourceCulture)); }
        }
        internal static string NetInvalidLocation {
            get { return (string)(ResourceManager.GetObject("NetInvalidLocation", resourceCulture)); }
        }

        internal static string NetAsyncDownloaderDownloading {
            get { return (string)(ResourceManager.GetObject("NetAsyncDownloaderDownloading", resourceCulture)); }
        }
        internal static string NetAsyncDownloaderCancelled {
            get { return (string)(ResourceManager.GetObject("NetAsyncDownloaderCancelled", resourceCulture)); }
        }
        internal static string NetAsyncDownloaderProgress {
            get { return (string)(ResourceManager.GetObject("NetAsyncDownloaderProgress", resourceCulture)); }
        }
        internal static string NetAsyncDownloaderTryingFallback {
            get { return (string)(ResourceManager.GetObject("NetAsyncDownloaderTryingFallback", resourceCulture)); }
        }

        internal static string NetFileCacheCannotFind {
            get { return (string)(ResourceManager.GetObject("NetFileCacheCannotFind", resourceCulture)); }
        }
        internal static string NetFileCacheZipError {
            get { return (string)(ResourceManager.GetObject("NetFileCacheZipError", resourceCulture)); }
        }
        internal static string NetFileCacheZipTestArchiveFalse {
            get { return (string)(ResourceManager.GetObject("NetFileCacheZipTestArchiveFalse", resourceCulture)); }
        }
        internal static string NetFileCacheNullFileName {
            get { return (string)(ResourceManager.GetObject("NetFileCacheNullFileName", resourceCulture)); }
        }
        internal static string NetFileCacheMonoNotSupported {
            get { return (string)(ResourceManager.GetObject("NetFileCacheMonoNotSupported", resourceCulture)); }
        }
        internal static string NetModuleCacheBadLength {
            get { return (string)(ResourceManager.GetObject("NetModuleCacheBadLength", resourceCulture)); }
        }
        internal static string NetModuleCacheNotValidZIP {
            get { return (string)(ResourceManager.GetObject("NetModuleCacheNotValidZIP", resourceCulture)); }
        }
        internal static string NetModuleCacheMismatchSHA1 {
            get { return (string)(ResourceManager.GetObject("NetModuleCacheMismatchSHA1", resourceCulture)); }
        }
        internal static string NetModuleCacheMismatchSHA256 {
            get { return (string)(ResourceManager.GetObject("NetModuleCacheMismatchSHA256", resourceCulture)); }
        }

        internal static string NetRepoCheckingForUpdates {
            get { return (string)(ResourceManager.GetObject("NetRepoCheckingForUpdates", resourceCulture)); }
        }
        internal static string NetRepoAlreadyUpToDate {
            get { return (string)(ResourceManager.GetObject("NetRepoAlreadyUpToDate", resourceCulture)); }
        }
        internal static string NetRepoNoChanges {
            get { return (string)(ResourceManager.GetObject("NetRepoNoChanges", resourceCulture)); }
        }
        internal static string NetRepoUpdating {
            get { return (string)(ResourceManager.GetObject("NetRepoUpdating", resourceCulture)); }
        }
        internal static string NetRepoUpdated {
            get { return (string)(ResourceManager.GetObject("NetRepoUpdated", resourceCulture)); }
        }
        internal static string NetRepoSaving {
            get { return (string)(ResourceManager.GetObject("NetRepoSaving", resourceCulture)); }
        }
        internal static string NetRepoSaved {
            get { return (string)(ResourceManager.GetObject("NetRepoSaved", resourceCulture)); }
        }
        internal static string NetRepoUpdatedAll {
            get { return (string)(ResourceManager.GetObject("NetRepoUpdatedAll", resourceCulture)); }
        }
        internal static string NetRepoNoModules {
            get { return (string)(ResourceManager.GetObject("NetRepoNoModules", resourceCulture)); }
        }
        internal static string NetRepoFailedDownload {
            get { return (string)(ResourceManager.GetObject("NetRepoFailedDownload", resourceCulture)); }
        }
        internal static string NetRepoChangedModulesReinstallPrompt {
            get { return (string)(ResourceManager.GetObject("NetRepoChangedModulesReinstallPrompt", resourceCulture)); }
        }
        internal static string NetRepoInconsistenciesHeader {
            get { return (string)(ResourceManager.GetObject("NetRepoInconsistenciesHeader", resourceCulture)); }
        }

        internal static string JsonRelationshipConverterAnyOfCombined {
            get { return (string)(ResourceManager.GetObject("JsonRelationshipConverterAnyOfCombined", resourceCulture)); }
        }

        internal static string RegistryFileConflict {
            get { return (string)(ResourceManager.GetObject("RegistryFileConflict", resourceCulture)); }
        }
        internal static string RegistryFileNotRemoved {
            get { return (string)(ResourceManager.GetObject("RegistryFileNotRemoved", resourceCulture)); }
        }
        internal static string RegistryManagerDirectoryNotFound {
            get { return (string)(ResourceManager.GetObject("RegistryManagerDirectoryNotFound", resourceCulture)); }
        }
        internal static string RegistryManagerExportFilenamePrefix {
            get { return (string)(ResourceManager.GetObject("RegistryManagerExportFilenamePrefix", resourceCulture)); }
        }
        internal static string RegistryManagerDefaultModpackAbstract {
            get { return (string)(ResourceManager.GetObject("RegistryManagerDefaultModpackAbstract", resourceCulture)); }
        }

        internal static string CkanModuleDeserialisationError {
            get { return (string)(ResourceManager.GetObject("CkanModuleDeserialisationError", resourceCulture)); }
        }
        internal static string CkanModuleUnsupportedSpec {
            get { return (string)(ResourceManager.GetObject("CkanModuleUnsupportedSpec", resourceCulture)); }
        }
        internal static string CkanModuleMissingRequired {
            get { return (string)(ResourceManager.GetObject("CkanModuleMissingRequired", resourceCulture)); }
        }
        internal static string CkanModuleKspVersionMixed {
            get { return (string)(ResourceManager.GetObject("CkanModuleKspVersionMixed", resourceCulture)); }
        }
        internal static string CkanModuleNotAvailable {
            get { return (string)(ResourceManager.GetObject("CkanModuleNotAvailable", resourceCulture)); }
        }
        internal static string CkanModuleNotInstalledOrAvailable {
            get { return (string)(ResourceManager.GetObject("CkanModuleNotInstalledOrAvailable", resourceCulture)); }
        }
        internal static string CkanModuleAllVersions {
            get { return (string)(ResourceManager.GetObject("CkanModuleAllVersions", resourceCulture)); }
        }

        internal static string LicenceInvalid {
            get { return (string)(ResourceManager.GetObject("LicenceInvalid", resourceCulture)); }
        }

        internal static string ModuleInstallDescriptorMustHaveInstallTo {
            get { return (string)(ResourceManager.GetObject("ModuleInstallDescriptorMustHaveInstallTo", resourceCulture)); }
        }
        internal static string ModuleInstallDescriptorRequireFileFind {
            get { return (string)(ResourceManager.GetObject("ModuleInstallDescriptorRequireFileFind", resourceCulture)); }
        }
        internal static string ModuleInstallDescriptorTooManyFileFind {
            get { return (string)(ResourceManager.GetObject("ModuleInstallDescriptorTooManyFileFind", resourceCulture)); }
        }
        internal static string ModuleInstallDescriptorTooManyFilterInclude {
            get { return (string)(ResourceManager.GetObject("ModuleInstallDescriptorTooManyFilterInclude", resourceCulture)); }
        }
        internal static string ModuleInstallDescriptorInvalidInstallPath {
            get { return (string)(ResourceManager.GetObject("ModuleInstallDescriptorInvalidInstallPath", resourceCulture)); }
        }
        internal static string ModuleInstallDescriptorUnknownInstallPath {
            get { return (string)(ResourceManager.GetObject("ModuleInstallDescriptorUnknownInstallPath", resourceCulture)); }
        }
        internal static string ModuleInstallDescriptorNoFilesFound {
            get { return (string)(ResourceManager.GetObject("ModuleInstallDescriptorNoFilesFound", resourceCulture)); }
        }
        internal static string ModuleInstallDescriptorAsNoPathSeparators {
            get { return (string)(ResourceManager.GetObject("ModuleInstallDescriptorAsNoPathSeparators", resourceCulture)); }
        }

        internal static string RelationshipDescriptorMinVersionOnly {
            get { return (string)(ResourceManager.GetObject("RelationshipDescriptorMinVersionOnly", resourceCulture)); }
        }
        internal static string RelationshipDescriptorMaxVersionOnly {
            get { return (string)(ResourceManager.GetObject("RelationshipDescriptorMaxVersionOnly", resourceCulture)); }
        }
        internal static string RelationshipDescriptorAnyOfJoiner {
            get { return (string)(ResourceManager.GetObject("RelationshipDescriptorAnyOfJoiner", resourceCulture)); }
        }

        internal static string ReleaseStatusInvalid {
            get { return (string)(ResourceManager.GetObject("ReleaseStatusInvalid", resourceCulture)); }
        }

        internal static string RepositoryDefaultName {
            get { return (string)(ResourceManager.GetObject("RepositoryDefaultName", resourceCulture)); }
        }

        internal static string CkanModuleVersionToString {
            get { return (string)(ResourceManager.GetObject("CkanModuleVersionToString", resourceCulture)); }
        }

        internal static string GameVersionYalovAny {
            get { return (string)(ResourceManager.GetObject("GameVersionYalovAny", resourceCulture)); }
        }
        internal static string GameVersionSelectNeedOne {
            get { return (string)(ResourceManager.GetObject("GameVersionSelectNeedOne", resourceCulture)); }
        }
        internal static string GameVersionSelectHeader {
            get { return (string)(ResourceManager.GetObject("GameVersionSelectHeader", resourceCulture)); }
        }
        internal static string GameVersionSelectBuildHeader {
            get { return (string)(ResourceManager.GetObject("GameVersionSelectBuildHeader", resourceCulture)); }
        }
        internal static string GameVersionNotKnown {
            get { return (string)(ResourceManager.GetObject("GameVersionNotKnown", resourceCulture)); }
        }
        internal static string GameVersionCriteriaToString {
            get { return (string)(ResourceManager.GetObject("GameVersionCriteriaToString", resourceCulture)); }
        }
        internal static string GameVersionRangeMinOnly {
            get { return (string)(ResourceManager.GetObject("GameVersionRangeMinOnly", resourceCulture)); }
        }
        internal static string GameVersionRangeMaxOnly {
            get { return (string)(ResourceManager.GetObject("GameVersionRangeMaxOnly", resourceCulture)); }
        }

        internal static string ProvidesModuleVersionToString {
            get { return (string)(ResourceManager.GetObject("ProvidesModuleVersionToString", resourceCulture)); }
        }

        internal static string UnmanagedModuleVersionUnknown {
            get { return (string)(ResourceManager.GetObject("UnmanagedModuleVersionUnknown", resourceCulture)); }
        }
        internal static string UnmanagedModuleVersionKnown {
            get { return (string)(ResourceManager.GetObject("UnmanagedModuleVersionKnown", resourceCulture)); }
        }

        internal static string PathUtilsNotAbsolute {
            get { return (string)(ResourceManager.GetObject("PathUtilsNotAbsolute", resourceCulture)); }
        }
        internal static string PathUtilsNotInside {
            get { return (string)(ResourceManager.GetObject("PathUtilsNotInside", resourceCulture)); }
        }
        internal static string PathUtilsAlreadyAbsolute {
            get { return (string)(ResourceManager.GetObject("PathUtilsAlreadyAbsolute", resourceCulture)); }
        }
        internal static string PathUtilsNotRoot {
            get { return (string)(ResourceManager.GetObject("PathUtilsNotRoot", resourceCulture)); }
        }

        internal static string GameInstanceSettingUp {
            get { return (string)(ResourceManager.GetObject("GameInstanceSettingUp", resourceCulture)); }
        }
        internal static string GameInstanceCreatingDir {
            get { return (string)(ResourceManager.GetObject("GameInstanceCreatingDir", resourceCulture)); }
        }
        internal static string GameInstanceScanning {
            get { return (string)(ResourceManager.GetObject("GameInstanceScanning", resourceCulture)); }
        }
        internal static string GameInstanceVersionNotFound {
            get { return (string)(ResourceManager.GetObject("GameInstanceVersionNotFound", resourceCulture)); }
        }
        internal static string GameInstanceToString {
            get { return (string)(ResourceManager.GetObject("GameInstanceToString", resourceCulture)); }
        }

        internal static string GameInstanceManagerPortable {
            get { return (string)(ResourceManager.GetObject("GameInstanceManagerPortable", resourceCulture)); }
        }
        internal static string GameInstanceManagerAuto {
            get { return (string)(ResourceManager.GetObject("GameInstanceManagerAuto", resourceCulture)); }
        }
        internal static string GameInstanceCloneInvalid {
            get { return (string)(ResourceManager.GetObject("GameInstanceCloneInvalid", resourceCulture)); }
        }
        internal static string GameInstanceFakeBadVersion {
            get { return (string)(ResourceManager.GetObject("GameInstanceFakeBadVersion", resourceCulture)); }
        }
        internal static string GameInstanceFakeNotEmpty {
            get { return (string)(ResourceManager.GetObject("GameInstanceFakeNotEmpty", resourceCulture)); }
        }
        internal static string GameInstanceFakeDLCNotAllowed {
            get { return (string)(ResourceManager.GetObject("GameInstanceFakeDLCNotAllowed", resourceCulture)); }
        }
        internal static string GameInstanceNoValidName {
            get { return (string)(ResourceManager.GetObject("GameInstanceNoValidName", resourceCulture)); }
        }
        internal static string GameInstanceByPathName {
            get { return (string)(ResourceManager.GetObject("GameInstanceByPathName", resourceCulture)); }
        }
        internal static string GameInstancePathNotFound {
            get { return (string)(ResourceManager.GetObject("GameInstancePathNotFound", resourceCulture)); }
        }

        internal static string ModuleInstallerDownloading {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerDownloading", resourceCulture)); }
        }
        internal static string ModuleInstallerNothingToInstall {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerNothingToInstall", resourceCulture)); }
        }
        internal static string ModuleInstallerAboutToInstall {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerAboutToInstall", resourceCulture)); }
        }
        internal static string ModuleInstallerModuleCached {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerModuleCached", resourceCulture)); }
        }
        internal static string ModuleInstallerUserDeclined {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerUserDeclined", resourceCulture)); }
        }
        internal static string ModuleInstallerInstallingMod {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerInstallingMod", resourceCulture)); }
        }
        internal static string ModuleInstallerUpdatingRegistry {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerUpdatingRegistry", resourceCulture)); }
        }
        internal static string ModuleInstallerCommitting {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerCommitting", resourceCulture)); }
        }
        internal static string ModuleInstallerRescanning {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerRescanning", resourceCulture)); }
        }
        internal static string ModuleInstallerDone {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerDone", resourceCulture)); }
        }
        internal static string ModuleInstallerAlreadyInstalled {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerAlreadyInstalled", resourceCulture)); }
        }
        internal static string ModuleInstallerZIPNotInCache {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerZIPNotInCache", resourceCulture)); }
        }
        internal static string ModuleInstallerMetapackage {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerMetapackage", resourceCulture)); }
        }
        internal static string ModuleInstallerDLC {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerDLC", resourceCulture)); }
        }
        internal static string ModuleInstallerBadDLLLocation {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerBadDLLLocation", resourceCulture)); }
        }
        internal static string ModuleInstallerFileSame {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerFileSame", resourceCulture)); }
        }
        internal static string ModuleInstallerFileDifferent {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerFileDifferent", resourceCulture)); }
        }
        internal static string ModuleInstallerOverwrite {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerOverwrite", resourceCulture)); }
        }
        internal static string ModuleInstallerOverwriteCancelled {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerOverwriteCancelled", resourceCulture)); }
        }
        internal static string ModuleInstallerFileExists {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerFileExists", resourceCulture)); }
        }
        internal static string ModuleInstallerAboutToRemove {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerAboutToRemove", resourceCulture)); }
        }
        internal static string ModuleInstallerContinuePrompt {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerContinuePrompt", resourceCulture)); }
        }
        internal static string ModuleInstallerRemoveAborted {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerRemoveAborted", resourceCulture)); }
        }
        internal static string ModuleInstallerRemovingMod {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerRemovingMod", resourceCulture)); }
        }
        internal static string ModuleInstallerAboutToUpgrade {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerAboutToUpgrade", resourceCulture)); }
        }
        internal static string ModuleInstallerUpgradeInstallingUncached {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerUpgradeInstallingUncached", resourceCulture)); }
        }
        internal static string ModuleInstallerUpgradeInstallingCached {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerUpgradeInstallingCached", resourceCulture)); }
        }
        internal static string ModuleInstallerUpgradeReinstalling {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerUpgradeReinstalling", resourceCulture)); }
        }
        internal static string ModuleInstallerUpgradeDowngrading {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerUpgradeDowngrading", resourceCulture)); }
        }
        internal static string ModuleInstallerUpgradeUpgradingUncached {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerUpgradeUpgradingUncached", resourceCulture)); }
        }
        internal static string ModuleInstallerUpgradeUpgradingCached {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerUpgradeUpgradingCached", resourceCulture)); }
        }
        internal static string ModuleInstallerUpgradeUserDeclined {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerUpgradeUserDeclined", resourceCulture)); }
        }

        internal static string ModuleInstallerReplaceAutodetected {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerReplaceAutodetected", resourceCulture)); }
        }
        internal static string ModuleInstallerReplaceNotInstalled {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerReplaceNotInstalled", resourceCulture)); }
        }
        internal static string ModuleInstallerImporting {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerImporting", resourceCulture)); }
        }
        internal static string ModuleInstallerImportAlreadyCached {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerImportAlreadyCached", resourceCulture)); }
        }
        internal static string ModuleInstallerImportingMod {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerImportingMod", resourceCulture)); }
        }
        internal static string ModuleInstallerImportNotFound {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerImportNotFound", resourceCulture)); }
        }
        internal static string ModuleInstallerImportInstallPrompt {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerImportInstallPrompt", resourceCulture)); }
        }
        internal static string ModuleInstallerImportDeletePrompt {
            get { return (string)(ResourceManager.GetObject("ModuleInstallerImportDeletePrompt", resourceCulture)); }
        }

        internal static string KrakenDependencyNotSatisfied {
            get { return (string)(ResourceManager.GetObject("KrakenDependencyNotSatisfied", resourceCulture)); }
        }
        internal static string KrakenDependencyModuleNotFound {
            get { return (string)(ResourceManager.GetObject("KrakenDependencyModuleNotFound", resourceCulture)); }
        }
        internal static string KrakenParentDependencyNotSatisfied {
            get { return (string)(ResourceManager.GetObject("KrakenParentDependencyNotSatisfied", resourceCulture)); }
        }
        internal static string KrakenAny {
            get { return (string)(ResourceManager.GetObject("KrakenAny", resourceCulture)); }
        }
        internal static string KrakenProvidedByMoreThanOne {
            get { return (string)(ResourceManager.GetObject("KrakenProvidedByMoreThanOne", resourceCulture)); }
        }
        internal static string KrakenInconsistenciesHeader {
            get { return (string)(ResourceManager.GetObject("KrakenInconsistenciesHeader", resourceCulture)); }
        }
        internal static string KrakenMissingDependency {
            get { return (string)(ResourceManager.GetObject("KrakenMissingDependency", resourceCulture)); }
        }
        internal static string KrakenConflictsWith {
            get { return (string)(ResourceManager.GetObject("KrakenConflictsWith", resourceCulture)); }
        }
        internal static string KrakenDownloadErrorsHeader {
            get { return (string)(ResourceManager.GetObject("KrakenDownloadErrorsHeader", resourceCulture)); }
        }
        internal static string KrakenModuleDownloadErrorsHeader {
            get { return (string)(ResourceManager.GetObject("KrakenModuleDownloadErrorsHeader", resourceCulture)); }
        }
        internal static string KrakenModuleDownloadError {
            get { return (string)(ResourceManager.GetObject("KrakenModuleDownloadError", resourceCulture)); }
        }
        internal static string KrakenNotInstalled {
            get { return (string)(ResourceManager.GetObject("KrakenNotInstalled", resourceCulture)); }
        }
        internal static string KrakenMissingCertificateUnix {
            get { return (string)(ResourceManager.GetObject("KrakenMissingCertificateUnix", resourceCulture)); }
        }
        internal static string KrakenMissingCertificateNotUnix {
            get { return (string)(ResourceManager.GetObject("KrakenMissingCertificateNotUnix", resourceCulture)); }
        }
        internal static string KrakenDownloadThrottled {
            get { return (string)(ResourceManager.GetObject("KrakenDownloadThrottled", resourceCulture)); }
        }
        internal static string KrakenAlreadyRunning {
            get { return (string)(ResourceManager.GetObject("KrakenAlreadyRunning", resourceCulture)); }
        }
        internal static string KrakenReinstallModule {
            get { return (string)(ResourceManager.GetObject("KrakenReinstallModule", resourceCulture)); }
        }

        internal static string RelationshipResolverConflictsWith {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverConflictsWith", resourceCulture)); }
        }
        internal static string RelationshipResolverRequiredButResolver {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverRequiredButResolver", resourceCulture)); }
        }
        internal static string RelationshipResolverRequiredButInstalled {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverRequiredButInstalled", resourceCulture)); }
        }
        internal static string RelationshipResolverAnUnmanaged {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverAnUnmanaged", resourceCulture)); }
        }
        internal static string RelationshipResolverUnmanaged {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverUnmanaged", resourceCulture)); }
        }
        internal static string RelationshipResolverModNotInList {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverModNotInList", resourceCulture)); }
        }
        internal static string RelationshipResolverInstalledReason {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverInstalledReason", resourceCulture)); }
        }
        internal static string RelationshipResolverUserReason {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverUserReason", resourceCulture)); }
        }
        internal static string RelationshipResolverNoLongerUsedReason {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverNoLongerUsedReason", resourceCulture)); }
        }
        internal static string RelationshipResolverReplacementReason {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverReplacementReason", resourceCulture)); }
        }
        internal static string RelationshipResolverSuggestedReason {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverSuggestedReason", resourceCulture)); }
        }
        internal static string RelationshipResolverDependsReason {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverDependsReason", resourceCulture)); }
        }
        internal static string RelationshipResolverRecommendedReason {
            get { return (string)(ResourceManager.GetObject("RelationshipResolverRecommendedReason", resourceCulture)); }
        }

        internal static string SanityCheckerUnsatisfiedDependency {
            get { return (string)(ResourceManager.GetObject("SanityCheckerUnsatisfiedDependency", resourceCulture)); }
        }
        internal static string SanityCheckerConflictsWith {
            get { return (string)(ResourceManager.GetObject("SanityCheckerConflictsWith", resourceCulture)); }
        }
    }
}
