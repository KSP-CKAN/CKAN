<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RegistryManagerExportFilenamePrefix" xml:space="preserve">
    <value>インストール済</value>
  </data>
  <data name="GameInstancePlayGameFailed" xml:space="preserve">
    <value>起動に失敗しました。

{0}</value>
  </data>
  <data name="KrakenFileExistsWithOwner" xml:space="preserve">
    <value>他のModが所有しているファイルに上書きしようとしました！
CKANをアップデート後にもう一度お試しください。

もしこの問題が再び発生するのであれば、パッケージ中のバグの可能性があります。
こちらで報告をお願いします:

https://github.com/KSP-CKAN/NetKAN/issues/new/choose

以下の情報を含めて報告してください:

ファイル      : {0}
インストールしようとしているMod : {1}
所持しているMod: {2}</value>
  </data>
  <data name="KrakenFileExistsWithoutOwner" xml:space="preserve">
    <value>Oh no!

既にいんすとーるされたのModをインストールしようとしているか、
いんすとーるされたの他のModと衝突している可能性があります。

安全の為の機能として、CKAN自身がインストールしていないファイルを書き換えたり、別のファイルに置き換えたりすることは決してありません。

もし {1} をCKANを通してインストールしたいのであれば,
手動でこれらの既に所有済みのModをアンインストールしてから:

{0}

もう一度お試しください。</value>
  </data>
  <data name="KrakenFileExistsWithoutInstalling" xml:space="preserve">
    <value>Oh no!

既にいんすとーるされたのModをインストールしようとしているか、
いんすとーるされたの他のModと衝突している可能性があります。

安全の為の機能として、CKAN自身がインストールしていないファイルを書き換えたり、別のファイルに置き換えたりすることは決してありません。

手動でこれらの既に所有済みのModをアンインストールしてから:

{0}

もう一度お試しください。</value>
  </data>
  <data name="KrakenBadMetadata" xml:space="preserve">
    <value>不正なメタデータが検出されました。Mod {0}: {1}</value>
  </data>
  <data name="KrakenIsDLC" xml:space="preserve">
    <value>CKAN は拡張 '{0}' をインストールできません。</value>
  </data>
  <data name="NetModuleCacheMetapackage" xml:space="preserve">
    <value>{0} {1} (メタパッケージ)</value>
  </data>
  <data name="NetModuleCacheModuleCached" xml:space="preserve">
    <value>{0} {1} (キャッシュ済)</value>
  </data>
  <data name="NetModuleCacheModuleHostSize" xml:space="preserve">
    <value>{0} {1} ({2}, {3})</value>
  </data>
  <data name="ModuleLabelListFavourites" xml:space="preserve">
    <value>お気に入り</value>
  </data>
  <data name="ModuleLabelListHidden" xml:space="preserve">
    <value>非表示</value>
  </data>
  <data name="ModuleLabelListHeld" xml:space="preserve">
    <value>保持</value>
  </data>
</root>
